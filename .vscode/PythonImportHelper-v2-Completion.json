[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "CYCLES",
        "importPath": "classes",
        "description": "classes",
        "isExtraImport": true,
        "detail": "classes",
        "documentation": {}
    },
    {
        "label": "Links",
        "importPath": "classes.CONSTANTS",
        "description": "classes.CONSTANTS",
        "isExtraImport": true,
        "detail": "classes.CONSTANTS",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "ResponsesSPCAPITAL",
        "importPath": "classes.CYCLES.SP_CAPITAL.SP_CAPITAL",
        "description": "classes.CYCLES.SP_CAPITAL.SP_CAPITAL",
        "isExtraImport": true,
        "detail": "classes.CYCLES.SP_CAPITAL.SP_CAPITAL",
        "documentation": {}
    },
    {
        "label": "init_driver",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def init_driver():\n    temp_user_data_dir = tempfile.mkdtemp()\n    download_dir = os.path.join(os.getcwd(), \"downloads\")\n    if not os.path.exists(download_dir):\n        os.makedirs(download_dir)\n    chrome_options = Options()\n    # chrome_options.add_argument(\"--headless\")\n    chrome_options.add_argument(\"--no-sandbox\")\n    chrome_options.add_argument(\"--disable-dev-shm-usage\")\n    chrome_options.add_argument(f\"user-data-dir={temp_user_data_dir}\")",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "waitFunc",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def waitFunc():\n    return WebDriverWait(driver, 30)\ndef wait_element(css_selector=\".div-loader.h-16.w-16.ng-tns-c303-1\"):\n    wait = waitFunc()\n    try:\n        print(\"Esperando elemento aparacer...\")\n        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, css_selector)))\n        print(\"Elemento apareceu!\")\n        wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, css_selector)))\n        print(\"‚úÖ Elemento sumiu!\")",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "wait_element",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def wait_element(css_selector=\".div-loader.h-16.w-16.ng-tns-c303-1\"):\n    wait = waitFunc()\n    try:\n        print(\"Esperando elemento aparacer...\")\n        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, css_selector)))\n        print(\"Elemento apareceu!\")\n        wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, css_selector)))\n        print(\"‚úÖ Elemento sumiu!\")\n    except Exception as e:\n        print(f\"‚ùå Timeout esperando o elemento {css_selector}: {e}\")",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "find_element_by_css",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def find_element_by_css(css_selector):\n    return driver.find_element(By.CSS_SELECTOR, css_selector)\ndef access_page(url):\n    driver.get(url)\n    print(f\"üîπ Accessing page: {url}\")\n    title = driver.title\n    print(f\"üìÑ Page title: {title}\")\n    wait_element(\n        \".flex.items-center.justify-center.fixed.z-50.bg-gray-200.h-screen.w-screen.inset-0.ng-tns-c98-0.ng-star-inserted\"\n    )",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "access_page",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def access_page(url):\n    driver.get(url)\n    print(f\"üîπ Accessing page: {url}\")\n    title = driver.title\n    print(f\"üìÑ Page title: {title}\")\n    wait_element(\n        \".flex.items-center.justify-center.fixed.z-50.bg-gray-200.h-screen.w-screen.inset-0.ng-tns-c98-0.ng-star-inserted\"\n    )\n    print(\"‚úÖ Page loaded!\")\n    time.sleep(1)",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "fill_login_form",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def fill_login_form():\n    wait = waitFunc()\n    login_input = find_element_by_css(\"input.flex.border.appearance-none.leading-tight\")\n    login_button = find_element_by_css(\n        \"button.flex.justify-center.items-center.cursor-pointer\"\n    )\n    login_input.send_keys(EMAIL)  # type: ignore\n    login_button.click()\n    wait_element()\n    time.sleep(1)",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "data_listing_page",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def data_listing_page():\n    time.sleep(1)\n    wait_element(\".block-page-div-loader\")\n    print(\"‚úÖ Page loaded!\")\n    time.sleep(1)\n    wait_element(\".block-page-div-loader\")\n    time.sleep(1)\n    print(\"‚úÖ Data loaded!\")\n    wait_element(\".ngt-shining-xs\")\n    print(\"‚úÖ Conte√∫do carregado!\")",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "get_available_cycle",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def get_available_cycle(skip_cycle=None):\n    \"\"\"\n    Percorre todas as pastas dentro de 'classes/CYCLES' e retorna o nome do primeiro ciclo com 'CAN_FILL = True',\n    ignorando o ciclo passado em `skip_cycle`.\n    \"\"\"\n    global LAST_CYCLE\n    cycles_path = CYCLES.__path__[0]\n    for cycle_folder in os.listdir(cycles_path):\n        folder_path = os.path.join(cycles_path, cycle_folder)\n        if os.path.isdir(folder_path):",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "select_cycle",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def select_cycle(cycle_text):\n    \"\"\"\n    Seleciona o ciclo dispon√≠vel na UI do site, dado o nome retornado por get_available_cycle().\n    \"\"\"\n    wait = waitFunc()\n    xpath = f\"//div[contains(@class, 'scrollable-content')]//div[contains(normalize-space(.), '{cycle_text}')]\"\n    try:\n        element = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))\n        print(f\"‚úÖ Ciclo encontrado: {element.text}\")\n        element.click()",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "filter_pending_reports",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def filter_pending_reports():\n    \"\"\"\n    Filtra os relat√≥rios pendentes e executa a navega√ß√£o at√© encontrar pend√™ncias ou acabar os ciclos.\n    \"\"\"\n    global LAST_CYCLE\n    wait = waitFunc()\n    try:\n        parent_xpath = \"(//div[contains(@class, 'float-right ml-2 ng-star-inserted')])[2]\"\n        link_xpath = f\"{parent_xpath}//a[contains(@class, 'cursor-pointer ng-star-inserted')]\"\n        filter_button = wait.until(EC.element_to_be_clickable((By.XPATH, link_xpath)))",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "generate_random_date",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def generate_random_date():\n    start_date = datetime(2024, 1, 1)\n    end_date = datetime(2024, 12, 31)\n    delta = end_date - start_date\n    random_days = random.randint(0, delta.days)\n    random_date = start_date + timedelta(days=random_days)\n    return random_date.strftime('%d/%m/%Y')\ndef fill_form():\n    print(\"‚úçÔ∏è Preenchendo o formul√°rio...\")\n    wait_element(\".ngt-shining-xs\")",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "fill_form",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def fill_form():\n    print(\"‚úçÔ∏è Preenchendo o formul√°rio...\")\n    wait_element(\".ngt-shining-xs\")\n    def click_input_field(index, tab=False):\n        input_fields = driver.find_elements(By.CSS_SELECTOR, \"div.ng-input > input\")\n        if input_fields:\n            driver.execute_script(\"arguments[0].scrollIntoView(true);\", input_fields[index])\n            time.sleep(0.5)\n            input_fields[index].click()\n            time.sleep(0.5)",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "close_pending_issues",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def close_pending_issues(tbody, rows):\n    print(\"‚ö†Ô∏è There are pending issues! Starting the process to close them...\")\n    try:\n        pending_row = None\n        for row in rows:\n            try:\n                status_badge = row.find_element(\n                    By.XPATH, \".//div[contains(text(),'Pendente')]\"\n                )\n                status_text = status_badge.text.strip()",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "check_pgrs_pending",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def check_pgrs_pending():\n    time.sleep(1)\n    tbody = driver.find_element(By.CSS_SELECTOR, \"tbody.bg-white\")\n    rows = tbody.find_elements(By.TAG_NAME, \"tr\")\n    pending_count = 0\n    non_pending_count = 0\n    for row in rows:\n        try:\n            status_badge = row.find_element(\n                By.XPATH, \".//div[contains(text(),'Pendente')]\"",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "navigate_pages_until_pending",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def navigate_pages_until_pending(cycle):\n    try:\n        while True:\n            pending_count, tbody, rows = check_pgrs_pending()\n            if pending_count > 0:\n                close_pending_issues(tbody, rows)\n                return True  \n            else:\n                print(f\"‚úÖ N√£o h√° pend√™ncias para o ciclo '{cycle}'.\")\n                return False  ",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "run_bot",
        "kind": 2,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "def run_bot():\n    print(\"üîπ Starting BOT_CEF...\")\n    url = Links.url\n    try:\n        access_page(url)\n        fill_login_form()\n        data_listing_page()\n        filter_pending_reports()\n    finally:\n        driver.quit()",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "EMAIL",
        "kind": 5,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "EMAIL = os.getenv(\"EMAIL\")\nPASSWORD = os.getenv(\"PASSWORD\")\ndef init_driver():\n    temp_user_data_dir = tempfile.mkdtemp()\n    download_dir = os.path.join(os.getcwd(), \"downloads\")\n    if not os.path.exists(download_dir):\n        os.makedirs(download_dir)\n    chrome_options = Options()\n    # chrome_options.add_argument(\"--headless\")\n    chrome_options.add_argument(\"--no-sandbox\")",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "PASSWORD = os.getenv(\"PASSWORD\")\ndef init_driver():\n    temp_user_data_dir = tempfile.mkdtemp()\n    download_dir = os.path.join(os.getcwd(), \"downloads\")\n    if not os.path.exists(download_dir):\n        os.makedirs(download_dir)\n    chrome_options = Options()\n    # chrome_options.add_argument(\"--headless\")\n    chrome_options.add_argument(\"--no-sandbox\")\n    chrome_options.add_argument(\"--disable-dev-shm-usage\")",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "driver = init_driver()\ndef waitFunc():\n    return WebDriverWait(driver, 30)\ndef wait_element(css_selector=\".div-loader.h-16.w-16.ng-tns-c303-1\"):\n    wait = waitFunc()\n    try:\n        print(\"Esperando elemento aparacer...\")\n        wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, css_selector)))\n        print(\"Elemento apareceu!\")\n        wait.until(EC.invisibility_of_element_located((By.CSS_SELECTOR, css_selector)))",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "LAST_CYCLE",
        "kind": 5,
        "importPath": "bot.scraper",
        "description": "bot.scraper",
        "peekOfCode": "LAST_CYCLE = None\ndef get_available_cycle(skip_cycle=None):\n    \"\"\"\n    Percorre todas as pastas dentro de 'classes/CYCLES' e retorna o nome do primeiro ciclo com 'CAN_FILL = True',\n    ignorando o ciclo passado em `skip_cycle`.\n    \"\"\"\n    global LAST_CYCLE\n    cycles_path = CYCLES.__path__[0]\n    for cycle_folder in os.listdir(cycles_path):\n        folder_path = os.path.join(cycles_path, cycle_folder)",
        "detail": "bot.scraper",
        "documentation": {}
    },
    {
        "label": "SPCAPITAL",
        "kind": 6,
        "importPath": "classes.CYCLES.SP_CAPITAL.SP_CAPITAL",
        "description": "classes.CYCLES.SP_CAPITAL.SP_CAPITAL",
        "peekOfCode": "class SPCAPITAL:\n    CAN_FILL = True\n    NAME = \"S√ÉO PAULO CAPITAL\"\nclass ResponsesSPCAPITAL(SPCAPITAL):\n    ESTRUTURA_ARMAZENAMENTO = \"√Årea coberta, ventilada, piso imperme√°vel, cont√©m o coletor/tambor onde as l√¢mpadas s√£o armazenadas de forma tempor√°ria at√© a coleta.\"\n    RESIDUOS_ENCAMINHADOS = \"L√¢mpadas\"\n    EMPRESA_RESPONSAVEL = \"EQS ENGENHARIA S.A\"\n    ENDERECO_LOCAL = \"Rua Odete Gomes Barreto, 262 - Vila Nova Manchester S√£o Paulo - SP\"\n    RESIDUOS_ARMAZENADOS = \"L√¢mpadas\"\n    SUGESTAO_MELHORIA = \"Nenhuma sugest√£o de melhoria.\"",
        "detail": "classes.CYCLES.SP_CAPITAL.SP_CAPITAL",
        "documentation": {}
    },
    {
        "label": "ResponsesSPCAPITAL",
        "kind": 6,
        "importPath": "classes.CYCLES.SP_CAPITAL.SP_CAPITAL",
        "description": "classes.CYCLES.SP_CAPITAL.SP_CAPITAL",
        "peekOfCode": "class ResponsesSPCAPITAL(SPCAPITAL):\n    ESTRUTURA_ARMAZENAMENTO = \"√Årea coberta, ventilada, piso imperme√°vel, cont√©m o coletor/tambor onde as l√¢mpadas s√£o armazenadas de forma tempor√°ria at√© a coleta.\"\n    RESIDUOS_ENCAMINHADOS = \"L√¢mpadas\"\n    EMPRESA_RESPONSAVEL = \"EQS ENGENHARIA S.A\"\n    ENDERECO_LOCAL = \"Rua Odete Gomes Barreto, 262 - Vila Nova Manchester S√£o Paulo - SP\"\n    RESIDUOS_ARMAZENADOS = \"L√¢mpadas\"\n    SUGESTAO_MELHORIA = \"Nenhuma sugest√£o de melhoria.\"\n    DIAGNOSTICO_RESIDUOS = \"L√¢mpadas\"\n    TRATAMENTO = \"Descontamina√ß√£o de l√¢mpadas\"\n    JUSTIFICATIVA = \"No processo de descontamina√ß√£o os componentes das l√¢mpadas s√£o separados para envi√°-los √† reciclagem ou viabilizar sua reutiliza√ß√£o.\"",
        "detail": "classes.CYCLES.SP_CAPITAL.SP_CAPITAL",
        "documentation": {}
    },
    {
        "label": "Links",
        "kind": 6,
        "importPath": "classes.CONSTANTS",
        "description": "classes.CONSTANTS",
        "peekOfCode": "class Links:\n    url = \"https://web.eloverde.com.br/\"",
        "detail": "classes.CONSTANTS",
        "documentation": {}
    }
]